apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.min.optimize"
        minSdkVersion 15
        targetSdkVersion 25
        versionName "2.0.0"
        versionCode getVersionCodeByName(versionName)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias rootProject.ext.keyAlias
            keyPassword rootProject.ext.keyPassword
            storeFile file(rootProject.ext.storeFile)
            storePassword rootProject.ext.storePassword
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
}

int getVersionCodeByName(String versionName) {
    def arr = versionName.split('\\.')
    def versionCode = Integer.parseInt(arr[0]) * 10 * 10 + Integer.parseInt(arr[1]) * 10 + Integer.parseInt(arr[2])
    println versionCode
    return versionCode
}

task uploadApkToFir << {
    def sourceFile = getLastModifyFileInDir(project.buildDir.absolutePath + "\\outputs\\apk");
    if (sourceFile != null && sourceFile.exists()) {
        def path = sourceFile.absolutePath
        println "start upload path=" + path
        def prefix = isWindows() ? "cmd /c " : "";
        Process p = (prefix + "fir login bd45787995687b3548aec9b22cd80a6a & fir publish ${path} -s='cheguotest'").execute()
        println "${p.text}"
        println "end upload...."
    }
}

def getLastModifyFileInDir(dirPath) {
    def srcDirFile = new File(dirPath)
    srcDirFile.exists()
    if (srcDirFile.isDirectory()) {
        def fileArr = srcDirFile.listFiles()
        def sortFileArr = fileArr.sort { a, b ->
            b.lastModified() - a.lastModified()
        }
        return sortFileArr[0]
    }
    return null
}

def isWindows() {
    return System.properties['os.name'].toString().toLowerCase().contains('windows');
}
